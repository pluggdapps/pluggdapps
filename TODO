* In command-line documentation article indicate that developers should check
  for existing commands before authoring a new-command to avoid duplicating
  names.

* When something fails in TTL, error message should point to TTL line-no not
  the .py file's line-no.

* Single-function applications to be developed and demonstrated.
    Publishing Static-web-site / Remote-file-explorer / Publishing repository /
    Discussion forums / Publishing version-control-systems /
    Brandizer to create brand-names using dictionary words.

* Create an article explaining content negotiation protocol in pluggdapps
  web-framework's matchrouter.

* Refer Apache mod_dir and mod_autoindex while developing
  Remote-file-explorer app.

* Netscale, figure out possible ways of exiting netscale platform (document
  them as well) and handle them gracefully inside pluggdapps (which
  will be executing as a separate port-process).

* Implement a native web server. Already there is an evented web-server using
  linux epoll mechanism. But it is yet to be ironed out and tested.
  Code is available in pluggdapps/evserver directory. Move the code to
  separate package and make it available as an IServer plugin.

* man sub-command for pa-script to show help text for interfaces and plugins.

* config sub-command for pa-script should include options to display settings
  help.

* Follow through
    http://rhettinger.wordpress.com/2011/05/26/super-considered-super/
  and work out method-resolution-order using super().

* -*- coding:utf-8 -*- 
  should always be prefixed at the beginning of the file ?

* Add appropriate classifiers.

* Routing, resolve view callable based in media-type. The problem is there can
  be more than one view callable which differ only by their media_type
  predicate. We need a logic in routing code which used Accept request header
  field to choose the highest priority media_type based on qvalue.

* Sphinx documentation, once the modules have stabilised, fix the
  documentation to specifically include classes and functions.

* Use Keep-Alive (deprecated header ?) to set timeout for client's keep-alive
  connections.

* Let log*() methods be available on every instantiated plugins.

* Response header fields are encoded using utf-8 encoding. But looks like the
  specification says that it must be ISO-8859-1.

Release check-list 
------------------

* Sphinx doc quick-start, one time activity.
    sphinx-quickstart   # And follow the prompts.
    sphinx-apidoc -f -d 2 -T -o  \
                  sphinxdoc/source/ pluggdapps \
                  $(APIDOC_EXCLUDE_PATH)"

* Change the release version in 
    ./CHANGELOG.rst,
    ./pluggdapps/__init__.py

* Update setup.py and MANIFEST.in for release

* Make sure that sphinxdoc/modules/ has all the modules that need to be
  documented.

* Enter the virtual environment and upload the source into pypi.
    make upload

* Upload documentation zip.

* After making the release, taging the branch, increment the version number.

* Create a tag and push the tagged branch to 
    code.google.com 
    bitbucket.com
    github.com

