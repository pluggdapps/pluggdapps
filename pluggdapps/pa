#! /usr/bin/env python3.2

# -*- coding: utf-8 -*-

# This file is subject to the terms and conditions defined in
# file 'LICENSE', which is part of this source code package.
#       Copyright (c) 2011 Netscale Computing

import sys, os, signal, subprocess, logging
from   argparse import ArgumentParser

import pluggdapps
from   pluggdapps.const import ROOTAPP, DEFAULT_INI
from   pluggdapps.core import pluginname
from   pluggdapps.platform import Pluggdapps, platform_logs, mount_logs
from   pluggdapps.plugin import plugin_init, pluginnames, query_plugins, \
                                ISettings
from   pluggdapps.interfaces import ICommand
import pluggdapps.utils as h

log = logging.getLogger(__name__)

description = "Pluggdapps command line script."
parser = ArgumentParser( description=description )

def handle_subcommand( pa, args ):
    subcmd = pluginname( args.handler.__self__ )
    if subcmd == 'serve' and args.reload :
        handle_monitor( args )
    platform_logs( pa )
    mount_logs( pa )
    pa.bootapps()
    args.handler( args )

def main():
    global parser
    # Fetch ini file (configuration file) from sys.argv, if not supplied use
    # the default ini-file.
    argv = sys.argv[:]
    try :
        while argv :
            arg = argv.pop(0)
            if arg == '-c' :
                inifile = argv.pop(0)
                break
        else :
            inifile = DEFAULT_INI
    except :
        inifile = DEFAULT_INI

    nolog_cmds = ['serve', 'unittest']
    if any( c in sys.argv for c in nolog_cmds ) :
        loglevel = None
    else :
        loglevel = logging.ERROR
    # Load complete chain of configuration from one or more ini files.
    pa = Pluggdapps.boot( inifile, loglevel=loglevel )

    # setup main script arguments
    parser = arguments( parser )
    subparsers = parser.add_subparsers( help="Sub-commands" )

    # setup sub-command arguments
    subcommands = query_plugins( ROOTAPP, ICommand, 'commands' )
    [ subcmd.subparser( parser, subparsers ) for subcmd in subcommands ]

    args = parser.parse_args()

    # --pa option
    [ sys.path.insert(0, p) for p in args.tostartpath ]

    # --pz option
    [ sys.path.append(p) for p in args.toendpath ]

    # -i (import)
    sys.path.insert( 0, '' )
    for i in args.imports : exec( "import %s" % i )

    handle_subcommand( pa, args )

if __name__ == '__main__' :
    main()
