#! /usr/bin/env python3.2

# -*- coding: utf-8 -*-

# This file is subject to the terms and conditions defined in
# file 'LICENSE', which is part of this source code package.
#       Copyright (c) 2011 Netscale Computing

import sys, os, signal, subprocess
from   argparse     import ArgumentParser
from   os.path      import dirname, join

import pluggdapps
from   pluggdapps.const      import ROOTAPP, DEFAULT_INI
from   pluggdapps.platform   import Pluggdapps, platform_logs, mount_logs
from   pluggdapps.plugin     import plugin_init, pluginnames, query_plugins,\
                                    ISettings, pluginname
from   pluggdapps.interfaces import ICommand
import pluggdapps.utils as h

DEFAULT_INI = join( dirname(__file__), 'tests', 'confs', 'develop.ini' )

def main():
    # setup main script arguments
    description = "Pluggdapps command line script."
    mainparser = ArgumentParser( description=description )
    mainparser.add_argument( '-c',
                             dest='config', default=DEFAULT_INI,
                             help="specify config file(s)" )
    mainparser.add_argument( '-r', 
                             action="store_true", dest="reload",
                             help="Restart server on file modifications" )
    mainparser.add_argument( '-m',
                             action="store_true", dest="monitor",
                             help=( "Used by the reloader to create a monitor "
                                    "thread. Not to be used directly, use -r." )
                           )
    mainparser.add_argument( '-i',
                             action="append", dest='imports', default=[],
                             help="specify modules to import" )
    mainparser.add_argument( '--pa', 
                             action="append", dest='tostartpath', default=[],
                             help="add given paths to the beginning of sys.path"
                           )
    mainparser.add_argument( '--pz', 
                             action="append", dest='toendpath', default=[],
                             help="add given paths to the end of sys.path" )

    subcommands = query_plugins( None, ICommand, 'commands' )

    subcmdnames = list( map( pluginname, subcommands ))
    cmdargs = []
    for x in sys.argv[1:] :
        if x in subcmdnames : break
        cmdargs.append( x )
    args = mainparser.parse_args( cmdargs )
    pa = Pluggdapps.boot( args.config )

    # setup sub-command arguments
    subcommands = query_plugins( None, ICommand, 'commands' )
    subparsers = mainparser.add_subparsers( help="Sub-commands" )
    [ subcmd.subparser( mainparser, subparsers ) for subcmd in subcommands ]

    args = mainparser.parse_args()

    # --pa option
    [ sys.path.insert(0, p) for p in args.tostartpath ]

    # --pz option
    [ sys.path.append(p) for p in args.toendpath ]

    # -i (import)
    sys.path.insert( 0, '' )
    for i in args.imports : exec( "import %s" % i )

    pa.bootapps()   # Boot applications

    # Handle subcommand
    args.handler( args )


if __name__ == '__main__' :
    main()
