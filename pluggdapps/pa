#! /usr/bin/env python3.2

# -*- coding: utf-8 -*-

# This file is subject to the terms and conditions defined in
# file 'LICENSE', which is part of this source code package.
#       Copyright (c) 2011 SKR Farms (P) LTD.

import sys
from   argparse import ArgumentParser

import pluggdapps
from   pluggdapps.const import ROOTAPP, DEFAULT_INI
from   pluggdapps.config import loadsettings
from   pluggdapps.platform import Platform
from   pluggdapps.plugin import plugin_init, pluginnames, query_plugin, \
                                ISettings
from   pluggdapps.interfaces import ICommand

description = "Pluggdapps command line script."
parser = ArgumentParser( description=description )

def arguments( parser ):
    parser.add_option( '-c', '--config',
                       dest='config', default=None,
                       help="specify config file(s)" )
    parser.add_option( '-i', '--import', 
                       action="append", dest='imports', default=[],
                       help="specify modules to import")
    parser.add_option( '--pa', 
                       action="append", dest='tostartpath', default=[],
                       help="add given paths to the beginning of sys.path")
    parser.add_option( '--pz', 
                       action="append", dest='toendpath', default=[],
                       help="add given paths to the end of sys.path" )
    return parser

def main( cls ):
    # Fetch ini file (configuration file) from sys.argv, if not supplied use
    # the default ini-file.
    argv = sys.argv[:]
    try :
        while argv :
            arg = argv.pop(0)
            if arg == '-c' :
                inifile = argv.pop(0)
                break
        else :
            inifile = DEFAULT_INI
    except :
        inifile = DEFAULT_INI
    # Load complete chain of configuration from one or more ini files.
    Platform.boot( inifile )

    parser = parse( usage )
    options, args = parser.parse_args( paargs )

    # --pa option
    [ sys.path.insert(0, p) for p in options.tostartpath ]

    # --pz option
    [ sys.path.append(p) for p in options.toendpath ]

    # -i (import)
    sys.path.insert(0, '')
    for i in options.imports : exec( "import %s" % i )

    if cmd :
        level = None if cmd in ['serve', 'unittest'] else 'info'
        # -c (config file)
        Platform.boot( loglevel=level )
        platform = query_plugin( ROOTAPP, ISettings, 'platform' )
        docommand( platform, cmd, cmdargs )
    else :
        parser.print_help()



def docommand( platform, command, argv ):
    """Handle sub-commands."""
    comm = query_plugin( ROOTAPP, ICommand, command, platform, argv=argv )
    comm.run()


if __name__ == '__main__' :
    paargs, cmd, cmdargs = [], None, sys.argv[1:]
    commands = pluginnames( ICommand )
    while cmdargs :
        arg = cmdargs.pop(0)
        if arg in commands :
            cmd = arg
            break
        else :
            paargs.append( arg )
    doscript( paargs, cmd )
